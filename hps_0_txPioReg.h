#ifndef _ALTERA_HPS_0_TXPIOREG_H_
#define _ALTERA_HPS_0_TXPIOREG_H_

/*
 * This file was automatically generated by the swinfo2header utility.
 * 
 * Created from SOPC Builder system 'soc_system' in
 * file './soc_system.sopcinfo'.
 */

/*
 * This file contains macros for module 'hps_0' and devices
 * connected to the following masters:
 *   h2f_axi_master
 *   h2f_lw_axi_master
 * 
 * Do not include this header file and another header file created for a
 * different module or master group at the same time.
 * Doing so may result in duplicate macro names.
 * Instead, use the system header file which has macros with unique names.
 */

/*
 * Macros for device 'adc_ramBank', class 'altera_avalon_onchip_memory2'
 * The macros are prefixed with 'ADC_RAMBANK_'.
 * The prefix is the slave descriptor.
 */
#define ADC_RAMBANK_COMPONENT_TYPE altera_avalon_onchip_memory2
#define ADC_RAMBANK_COMPONENT_NAME adc_ramBank
#define ADC_RAMBANK_BASE 0x0
#define ADC_RAMBANK_SPAN 262144
#define ADC_RAMBANK_END 0x3ffff
#define ADC_RAMBANK_ALLOW_IN_SYSTEM_MEMORY_CONTENT_EDITOR 0
#define ADC_RAMBANK_ALLOW_MRAM_SIM_CONTENTS_ONLY_FILE 0
#define ADC_RAMBANK_CONTENTS_INFO ""
#define ADC_RAMBANK_DUAL_PORT 1
#define ADC_RAMBANK_GUI_RAM_BLOCK_TYPE AUTO
#define ADC_RAMBANK_INIT_CONTENTS_FILE soc_system_adc_ramBank
#define ADC_RAMBANK_INIT_MEM_CONTENT 1
#define ADC_RAMBANK_INSTANCE_ID NONE
#define ADC_RAMBANK_NON_DEFAULT_INIT_FILE_ENABLED 0
#define ADC_RAMBANK_RAM_BLOCK_TYPE AUTO
#define ADC_RAMBANK_READ_DURING_WRITE_MODE DONT_CARE
#define ADC_RAMBANK_SINGLE_CLOCK_OP 0
#define ADC_RAMBANK_SIZE_MULTIPLE 1
#define ADC_RAMBANK_SIZE_VALUE 262144
#define ADC_RAMBANK_WRITABLE 1
#define ADC_RAMBANK_MEMORY_INFO_DAT_SYM_INSTALL_DIR SIM_DIR
#define ADC_RAMBANK_MEMORY_INFO_GENERATE_DAT_SYM 1
#define ADC_RAMBANK_MEMORY_INFO_GENERATE_HEX 1
#define ADC_RAMBANK_MEMORY_INFO_HAS_BYTE_LANE 0
#define ADC_RAMBANK_MEMORY_INFO_HEX_INSTALL_DIR QPF_DIR
#define ADC_RAMBANK_MEMORY_INFO_MEM_INIT_DATA_WIDTH 128
#define ADC_RAMBANK_MEMORY_INFO_MEM_INIT_FILENAME soc_system_adc_ramBank

/*
 * Macros for device 'rcv_interrupt', class 'altera_avalon_pio'
 * The macros are prefixed with 'RCV_INTERRUPT_'.
 * The prefix is the slave descriptor.
 */
#define RCV_INTERRUPT_COMPONENT_TYPE altera_avalon_pio
#define RCV_INTERRUPT_COMPONENT_NAME rcv_interrupt
#define RCV_INTERRUPT_BASE 0x0
#define RCV_INTERRUPT_SPAN 16
#define RCV_INTERRUPT_END 0xf
#define RCV_INTERRUPT_IRQ 0
#define RCV_INTERRUPT_BIT_CLEARING_EDGE_REGISTER 1
#define RCV_INTERRUPT_BIT_MODIFYING_OUTPUT_REGISTER 0
#define RCV_INTERRUPT_CAPTURE 1
#define RCV_INTERRUPT_DATA_WIDTH 32
#define RCV_INTERRUPT_DO_TEST_BENCH_WIRING 0
#define RCV_INTERRUPT_DRIVEN_SIM_VALUE 0
#define RCV_INTERRUPT_EDGE_TYPE RISING
#define RCV_INTERRUPT_FREQ 50000000
#define RCV_INTERRUPT_HAS_IN 1
#define RCV_INTERRUPT_HAS_OUT 0
#define RCV_INTERRUPT_HAS_TRI 0
#define RCV_INTERRUPT_IRQ_TYPE EDGE
#define RCV_INTERRUPT_RESET_VALUE 255

/*
 * Macros for device 'tx_interrupt', class 'altera_avalon_pio'
 * The macros are prefixed with 'TX_INTERRUPT_'.
 * The prefix is the slave descriptor.
 */
#define TX_INTERRUPT_COMPONENT_TYPE altera_avalon_pio
#define TX_INTERRUPT_COMPONENT_NAME tx_interrupt
#define TX_INTERRUPT_BASE 0x10
#define TX_INTERRUPT_SPAN 16
#define TX_INTERRUPT_END 0x1f
#define TX_INTERRUPT_IRQ 1
#define TX_INTERRUPT_BIT_CLEARING_EDGE_REGISTER 1
#define TX_INTERRUPT_BIT_MODIFYING_OUTPUT_REGISTER 0
#define TX_INTERRUPT_CAPTURE 1
#define TX_INTERRUPT_DATA_WIDTH 32
#define TX_INTERRUPT_DO_TEST_BENCH_WIRING 0
#define TX_INTERRUPT_DRIVEN_SIM_VALUE 0
#define TX_INTERRUPT_EDGE_TYPE RISING
#define TX_INTERRUPT_FREQ 50000000
#define TX_INTERRUPT_HAS_IN 1
#define TX_INTERRUPT_HAS_OUT 0
#define TX_INTERRUPT_HAS_TRI 0
#define TX_INTERRUPT_IRQ_TYPE EDGE
#define TX_INTERRUPT_RESET_VALUE 255

/*
 * Macros for device 'tx_pio_reg0', class 'altera_avalon_pio'
 * The macros are prefixed with 'TX_PIO_REG0_'.
 * The prefix is the slave descriptor.
 */
#define TX_PIO_REG0_COMPONENT_TYPE altera_avalon_pio
#define TX_PIO_REG0_COMPONENT_NAME tx_pio_reg0
#define TX_PIO_REG0_BASE 0x20
#define TX_PIO_REG0_SPAN 16
#define TX_PIO_REG0_END 0x2f
#define TX_PIO_REG0_BIT_CLEARING_EDGE_REGISTER 0
#define TX_PIO_REG0_BIT_MODIFYING_OUTPUT_REGISTER 0
#define TX_PIO_REG0_CAPTURE 0
#define TX_PIO_REG0_DATA_WIDTH 32
#define TX_PIO_REG0_DO_TEST_BENCH_WIRING 0
#define TX_PIO_REG0_DRIVEN_SIM_VALUE 0
#define TX_PIO_REG0_EDGE_TYPE NONE
#define TX_PIO_REG0_FREQ 50000000
#define TX_PIO_REG0_HAS_IN 0
#define TX_PIO_REG0_HAS_OUT 1
#define TX_PIO_REG0_HAS_TRI 0
#define TX_PIO_REG0_IRQ_TYPE NONE
#define TX_PIO_REG0_RESET_VALUE 0

/*
 * Macros for device 'tx_pio_reg1', class 'altera_avalon_pio'
 * The macros are prefixed with 'TX_PIO_REG1_'.
 * The prefix is the slave descriptor.
 */
#define TX_PIO_REG1_COMPONENT_TYPE altera_avalon_pio
#define TX_PIO_REG1_COMPONENT_NAME tx_pio_reg1
#define TX_PIO_REG1_BASE 0x30
#define TX_PIO_REG1_SPAN 16
#define TX_PIO_REG1_END 0x3f
#define TX_PIO_REG1_BIT_CLEARING_EDGE_REGISTER 0
#define TX_PIO_REG1_BIT_MODIFYING_OUTPUT_REGISTER 0
#define TX_PIO_REG1_CAPTURE 0
#define TX_PIO_REG1_DATA_WIDTH 32
#define TX_PIO_REG1_DO_TEST_BENCH_WIRING 0
#define TX_PIO_REG1_DRIVEN_SIM_VALUE 0
#define TX_PIO_REG1_EDGE_TYPE NONE
#define TX_PIO_REG1_FREQ 50000000
#define TX_PIO_REG1_HAS_IN 0
#define TX_PIO_REG1_HAS_OUT 1
#define TX_PIO_REG1_HAS_TRI 0
#define TX_PIO_REG1_IRQ_TYPE NONE
#define TX_PIO_REG1_RESET_VALUE 0

/*
 * Macros for device 'tx_pio_reg2', class 'altera_avalon_pio'
 * The macros are prefixed with 'TX_PIO_REG2_'.
 * The prefix is the slave descriptor.
 */
#define TX_PIO_REG2_COMPONENT_TYPE altera_avalon_pio
#define TX_PIO_REG2_COMPONENT_NAME tx_pio_reg2
#define TX_PIO_REG2_BASE 0x40
#define TX_PIO_REG2_SPAN 16
#define TX_PIO_REG2_END 0x4f
#define TX_PIO_REG2_BIT_CLEARING_EDGE_REGISTER 0
#define TX_PIO_REG2_BIT_MODIFYING_OUTPUT_REGISTER 0
#define TX_PIO_REG2_CAPTURE 0
#define TX_PIO_REG2_DATA_WIDTH 32
#define TX_PIO_REG2_DO_TEST_BENCH_WIRING 0
#define TX_PIO_REG2_DRIVEN_SIM_VALUE 0
#define TX_PIO_REG2_EDGE_TYPE NONE
#define TX_PIO_REG2_FREQ 50000000
#define TX_PIO_REG2_HAS_IN 0
#define TX_PIO_REG2_HAS_OUT 1
#define TX_PIO_REG2_HAS_TRI 0
#define TX_PIO_REG2_IRQ_TYPE NONE
#define TX_PIO_REG2_RESET_VALUE 0

/*
 * Macros for device 'tx_pio_reg3', class 'altera_avalon_pio'
 * The macros are prefixed with 'TX_PIO_REG3_'.
 * The prefix is the slave descriptor.
 */
#define TX_PIO_REG3_COMPONENT_TYPE altera_avalon_pio
#define TX_PIO_REG3_COMPONENT_NAME tx_pio_reg3
#define TX_PIO_REG3_BASE 0x50
#define TX_PIO_REG3_SPAN 16
#define TX_PIO_REG3_END 0x5f
#define TX_PIO_REG3_BIT_CLEARING_EDGE_REGISTER 0
#define TX_PIO_REG3_BIT_MODIFYING_OUTPUT_REGISTER 0
#define TX_PIO_REG3_CAPTURE 0
#define TX_PIO_REG3_DATA_WIDTH 32
#define TX_PIO_REG3_DO_TEST_BENCH_WIRING 0
#define TX_PIO_REG3_DRIVEN_SIM_VALUE 0
#define TX_PIO_REG3_EDGE_TYPE NONE
#define TX_PIO_REG3_FREQ 50000000
#define TX_PIO_REG3_HAS_IN 0
#define TX_PIO_REG3_HAS_OUT 1
#define TX_PIO_REG3_HAS_TRI 0
#define TX_PIO_REG3_IRQ_TYPE NONE
#define TX_PIO_REG3_RESET_VALUE 0

/*
 * Macros for device 'tx_pio_reg4', class 'altera_avalon_pio'
 * The macros are prefixed with 'TX_PIO_REG4_'.
 * The prefix is the slave descriptor.
 */
#define TX_PIO_REG4_COMPONENT_TYPE altera_avalon_pio
#define TX_PIO_REG4_COMPONENT_NAME tx_pio_reg4
#define TX_PIO_REG4_BASE 0x60
#define TX_PIO_REG4_SPAN 16
#define TX_PIO_REG4_END 0x6f
#define TX_PIO_REG4_BIT_CLEARING_EDGE_REGISTER 0
#define TX_PIO_REG4_BIT_MODIFYING_OUTPUT_REGISTER 0
#define TX_PIO_REG4_CAPTURE 0
#define TX_PIO_REG4_DATA_WIDTH 32
#define TX_PIO_REG4_DO_TEST_BENCH_WIRING 0
#define TX_PIO_REG4_DRIVEN_SIM_VALUE 0
#define TX_PIO_REG4_EDGE_TYPE NONE
#define TX_PIO_REG4_FREQ 50000000
#define TX_PIO_REG4_HAS_IN 0
#define TX_PIO_REG4_HAS_OUT 1
#define TX_PIO_REG4_HAS_TRI 0
#define TX_PIO_REG4_IRQ_TYPE NONE
#define TX_PIO_REG4_RESET_VALUE 0

/*
 * Macros for device 'tx_pio_reg5', class 'altera_avalon_pio'
 * The macros are prefixed with 'TX_PIO_REG5_'.
 * The prefix is the slave descriptor.
 */
#define TX_PIO_REG5_COMPONENT_TYPE altera_avalon_pio
#define TX_PIO_REG5_COMPONENT_NAME tx_pio_reg5
#define TX_PIO_REG5_BASE 0x70
#define TX_PIO_REG5_SPAN 16
#define TX_PIO_REG5_END 0x7f
#define TX_PIO_REG5_BIT_CLEARING_EDGE_REGISTER 0
#define TX_PIO_REG5_BIT_MODIFYING_OUTPUT_REGISTER 0
#define TX_PIO_REG5_CAPTURE 0
#define TX_PIO_REG5_DATA_WIDTH 32
#define TX_PIO_REG5_DO_TEST_BENCH_WIRING 0
#define TX_PIO_REG5_DRIVEN_SIM_VALUE 0
#define TX_PIO_REG5_EDGE_TYPE NONE
#define TX_PIO_REG5_FREQ 50000000
#define TX_PIO_REG5_HAS_IN 0
#define TX_PIO_REG5_HAS_OUT 1
#define TX_PIO_REG5_HAS_TRI 0
#define TX_PIO_REG5_IRQ_TYPE NONE
#define TX_PIO_REG5_RESET_VALUE 0

/*
 * Macros for device 'tx_pio_reg6', class 'altera_avalon_pio'
 * The macros are prefixed with 'TX_PIO_REG6_'.
 * The prefix is the slave descriptor.
 */
#define TX_PIO_REG6_COMPONENT_TYPE altera_avalon_pio
#define TX_PIO_REG6_COMPONENT_NAME tx_pio_reg6
#define TX_PIO_REG6_BASE 0x80
#define TX_PIO_REG6_SPAN 16
#define TX_PIO_REG6_END 0x8f
#define TX_PIO_REG6_BIT_CLEARING_EDGE_REGISTER 0
#define TX_PIO_REG6_BIT_MODIFYING_OUTPUT_REGISTER 0
#define TX_PIO_REG6_CAPTURE 0
#define TX_PIO_REG6_DATA_WIDTH 32
#define TX_PIO_REG6_DO_TEST_BENCH_WIRING 0
#define TX_PIO_REG6_DRIVEN_SIM_VALUE 0
#define TX_PIO_REG6_EDGE_TYPE NONE
#define TX_PIO_REG6_FREQ 50000000
#define TX_PIO_REG6_HAS_IN 0
#define TX_PIO_REG6_HAS_OUT 1
#define TX_PIO_REG6_HAS_TRI 0
#define TX_PIO_REG6_IRQ_TYPE NONE
#define TX_PIO_REG6_RESET_VALUE 0

/*
 * Macros for device 'tx_pio_reg7', class 'altera_avalon_pio'
 * The macros are prefixed with 'TX_PIO_REG7_'.
 * The prefix is the slave descriptor.
 */
#define TX_PIO_REG7_COMPONENT_TYPE altera_avalon_pio
#define TX_PIO_REG7_COMPONENT_NAME tx_pio_reg7
#define TX_PIO_REG7_BASE 0x90
#define TX_PIO_REG7_SPAN 16
#define TX_PIO_REG7_END 0x9f
#define TX_PIO_REG7_BIT_CLEARING_EDGE_REGISTER 0
#define TX_PIO_REG7_BIT_MODIFYING_OUTPUT_REGISTER 0
#define TX_PIO_REG7_CAPTURE 0
#define TX_PIO_REG7_DATA_WIDTH 32
#define TX_PIO_REG7_DO_TEST_BENCH_WIRING 0
#define TX_PIO_REG7_DRIVEN_SIM_VALUE 0
#define TX_PIO_REG7_EDGE_TYPE NONE
#define TX_PIO_REG7_FREQ 50000000
#define TX_PIO_REG7_HAS_IN 0
#define TX_PIO_REG7_HAS_OUT 1
#define TX_PIO_REG7_HAS_TRI 0
#define TX_PIO_REG7_IRQ_TYPE NONE
#define TX_PIO_REG7_RESET_VALUE 0

/*
 * Macros for device 'tx_pio_reg8', class 'altera_avalon_pio'
 * The macros are prefixed with 'TX_PIO_REG8_'.
 * The prefix is the slave descriptor.
 */
#define TX_PIO_REG8_COMPONENT_TYPE altera_avalon_pio
#define TX_PIO_REG8_COMPONENT_NAME tx_pio_reg8
#define TX_PIO_REG8_BASE 0xa0
#define TX_PIO_REG8_SPAN 16
#define TX_PIO_REG8_END 0xaf
#define TX_PIO_REG8_BIT_CLEARING_EDGE_REGISTER 0
#define TX_PIO_REG8_BIT_MODIFYING_OUTPUT_REGISTER 0
#define TX_PIO_REG8_CAPTURE 0
#define TX_PIO_REG8_DATA_WIDTH 32
#define TX_PIO_REG8_DO_TEST_BENCH_WIRING 0
#define TX_PIO_REG8_DRIVEN_SIM_VALUE 0
#define TX_PIO_REG8_EDGE_TYPE NONE
#define TX_PIO_REG8_FREQ 50000000
#define TX_PIO_REG8_HAS_IN 0
#define TX_PIO_REG8_HAS_OUT 1
#define TX_PIO_REG8_HAS_TRI 0
#define TX_PIO_REG8_IRQ_TYPE NONE
#define TX_PIO_REG8_RESET_VALUE 0

/*
 * Macros for device 'tx_pio_reg9', class 'altera_avalon_pio'
 * The macros are prefixed with 'TX_PIO_REG9_'.
 * The prefix is the slave descriptor.
 */
#define TX_PIO_REG9_COMPONENT_TYPE altera_avalon_pio
#define TX_PIO_REG9_COMPONENT_NAME tx_pio_reg9
#define TX_PIO_REG9_BASE 0xb0
#define TX_PIO_REG9_SPAN 16
#define TX_PIO_REG9_END 0xbf
#define TX_PIO_REG9_BIT_CLEARING_EDGE_REGISTER 0
#define TX_PIO_REG9_BIT_MODIFYING_OUTPUT_REGISTER 0
#define TX_PIO_REG9_CAPTURE 0
#define TX_PIO_REG9_DATA_WIDTH 32
#define TX_PIO_REG9_DO_TEST_BENCH_WIRING 0
#define TX_PIO_REG9_DRIVEN_SIM_VALUE 0
#define TX_PIO_REG9_EDGE_TYPE NONE
#define TX_PIO_REG9_FREQ 50000000
#define TX_PIO_REG9_HAS_IN 0
#define TX_PIO_REG9_HAS_OUT 1
#define TX_PIO_REG9_HAS_TRI 0
#define TX_PIO_REG9_IRQ_TYPE NONE
#define TX_PIO_REG9_RESET_VALUE 0

/*
 * Macros for device 'tx_pio_reg10', class 'altera_avalon_pio'
 * The macros are prefixed with 'TX_PIO_REG10_'.
 * The prefix is the slave descriptor.
 */
#define TX_PIO_REG10_COMPONENT_TYPE altera_avalon_pio
#define TX_PIO_REG10_COMPONENT_NAME tx_pio_reg10
#define TX_PIO_REG10_BASE 0xc0
#define TX_PIO_REG10_SPAN 16
#define TX_PIO_REG10_END 0xcf
#define TX_PIO_REG10_BIT_CLEARING_EDGE_REGISTER 0
#define TX_PIO_REG10_BIT_MODIFYING_OUTPUT_REGISTER 0
#define TX_PIO_REG10_CAPTURE 0
#define TX_PIO_REG10_DATA_WIDTH 32
#define TX_PIO_REG10_DO_TEST_BENCH_WIRING 0
#define TX_PIO_REG10_DRIVEN_SIM_VALUE 0
#define TX_PIO_REG10_EDGE_TYPE NONE
#define TX_PIO_REG10_FREQ 50000000
#define TX_PIO_REG10_HAS_IN 0
#define TX_PIO_REG10_HAS_OUT 1
#define TX_PIO_REG10_HAS_TRI 0
#define TX_PIO_REG10_IRQ_TYPE NONE
#define TX_PIO_REG10_RESET_VALUE 0

/*
 * Macros for device 'tx_pio_reg11', class 'altera_avalon_pio'
 * The macros are prefixed with 'TX_PIO_REG11_'.
 * The prefix is the slave descriptor.
 */
#define TX_PIO_REG11_COMPONENT_TYPE altera_avalon_pio
#define TX_PIO_REG11_COMPONENT_NAME tx_pio_reg11
#define TX_PIO_REG11_BASE 0xd0
#define TX_PIO_REG11_SPAN 16
#define TX_PIO_REG11_END 0xdf
#define TX_PIO_REG11_BIT_CLEARING_EDGE_REGISTER 0
#define TX_PIO_REG11_BIT_MODIFYING_OUTPUT_REGISTER 0
#define TX_PIO_REG11_CAPTURE 0
#define TX_PIO_REG11_DATA_WIDTH 32
#define TX_PIO_REG11_DO_TEST_BENCH_WIRING 0
#define TX_PIO_REG11_DRIVEN_SIM_VALUE 0
#define TX_PIO_REG11_EDGE_TYPE NONE
#define TX_PIO_REG11_FREQ 50000000
#define TX_PIO_REG11_HAS_IN 0
#define TX_PIO_REG11_HAS_OUT 1
#define TX_PIO_REG11_HAS_TRI 0
#define TX_PIO_REG11_IRQ_TYPE NONE
#define TX_PIO_REG11_RESET_VALUE 0

/*
 * Macros for device 'tx_pio_reg12', class 'altera_avalon_pio'
 * The macros are prefixed with 'TX_PIO_REG12_'.
 * The prefix is the slave descriptor.
 */
#define TX_PIO_REG12_COMPONENT_TYPE altera_avalon_pio
#define TX_PIO_REG12_COMPONENT_NAME tx_pio_reg12
#define TX_PIO_REG12_BASE 0xe0
#define TX_PIO_REG12_SPAN 16
#define TX_PIO_REG12_END 0xef
#define TX_PIO_REG12_BIT_CLEARING_EDGE_REGISTER 0
#define TX_PIO_REG12_BIT_MODIFYING_OUTPUT_REGISTER 0
#define TX_PIO_REG12_CAPTURE 0
#define TX_PIO_REG12_DATA_WIDTH 32
#define TX_PIO_REG12_DO_TEST_BENCH_WIRING 0
#define TX_PIO_REG12_DRIVEN_SIM_VALUE 0
#define TX_PIO_REG12_EDGE_TYPE NONE
#define TX_PIO_REG12_FREQ 50000000
#define TX_PIO_REG12_HAS_IN 0
#define TX_PIO_REG12_HAS_OUT 1
#define TX_PIO_REG12_HAS_TRI 0
#define TX_PIO_REG12_IRQ_TYPE NONE
#define TX_PIO_REG12_RESET_VALUE 0

/*
 * Macros for device 'tx_pio_reg13', class 'altera_avalon_pio'
 * The macros are prefixed with 'TX_PIO_REG13_'.
 * The prefix is the slave descriptor.
 */
#define TX_PIO_REG13_COMPONENT_TYPE altera_avalon_pio
#define TX_PIO_REG13_COMPONENT_NAME tx_pio_reg13
#define TX_PIO_REG13_BASE 0xf0
#define TX_PIO_REG13_SPAN 16
#define TX_PIO_REG13_END 0xff
#define TX_PIO_REG13_BIT_CLEARING_EDGE_REGISTER 0
#define TX_PIO_REG13_BIT_MODIFYING_OUTPUT_REGISTER 0
#define TX_PIO_REG13_CAPTURE 0
#define TX_PIO_REG13_DATA_WIDTH 32
#define TX_PIO_REG13_DO_TEST_BENCH_WIRING 0
#define TX_PIO_REG13_DRIVEN_SIM_VALUE 0
#define TX_PIO_REG13_EDGE_TYPE NONE
#define TX_PIO_REG13_FREQ 50000000
#define TX_PIO_REG13_HAS_IN 0
#define TX_PIO_REG13_HAS_OUT 1
#define TX_PIO_REG13_HAS_TRI 0
#define TX_PIO_REG13_IRQ_TYPE NONE
#define TX_PIO_REG13_RESET_VALUE 0

/*
 * Macros for device 'tx_pio_reg14', class 'altera_avalon_pio'
 * The macros are prefixed with 'TX_PIO_REG14_'.
 * The prefix is the slave descriptor.
 */
#define TX_PIO_REG14_COMPONENT_TYPE altera_avalon_pio
#define TX_PIO_REG14_COMPONENT_NAME tx_pio_reg14
#define TX_PIO_REG14_BASE 0x100
#define TX_PIO_REG14_SPAN 16
#define TX_PIO_REG14_END 0x10f
#define TX_PIO_REG14_BIT_CLEARING_EDGE_REGISTER 0
#define TX_PIO_REG14_BIT_MODIFYING_OUTPUT_REGISTER 0
#define TX_PIO_REG14_CAPTURE 0
#define TX_PIO_REG14_DATA_WIDTH 32
#define TX_PIO_REG14_DO_TEST_BENCH_WIRING 0
#define TX_PIO_REG14_DRIVEN_SIM_VALUE 0
#define TX_PIO_REG14_EDGE_TYPE NONE
#define TX_PIO_REG14_FREQ 50000000
#define TX_PIO_REG14_HAS_IN 0
#define TX_PIO_REG14_HAS_OUT 1
#define TX_PIO_REG14_HAS_TRI 0
#define TX_PIO_REG14_IRQ_TYPE NONE
#define TX_PIO_REG14_RESET_VALUE 0

/*
 * Macros for device 'tx_pio_reg15', class 'altera_avalon_pio'
 * The macros are prefixed with 'TX_PIO_REG15_'.
 * The prefix is the slave descriptor.
 */
#define TX_PIO_REG15_COMPONENT_TYPE altera_avalon_pio
#define TX_PIO_REG15_COMPONENT_NAME tx_pio_reg15
#define TX_PIO_REG15_BASE 0x110
#define TX_PIO_REG15_SPAN 16
#define TX_PIO_REG15_END 0x11f
#define TX_PIO_REG15_BIT_CLEARING_EDGE_REGISTER 0
#define TX_PIO_REG15_BIT_MODIFYING_OUTPUT_REGISTER 0
#define TX_PIO_REG15_CAPTURE 0
#define TX_PIO_REG15_DATA_WIDTH 32
#define TX_PIO_REG15_DO_TEST_BENCH_WIRING 0
#define TX_PIO_REG15_DRIVEN_SIM_VALUE 0
#define TX_PIO_REG15_EDGE_TYPE NONE
#define TX_PIO_REG15_FREQ 50000000
#define TX_PIO_REG15_HAS_IN 0
#define TX_PIO_REG15_HAS_OUT 1
#define TX_PIO_REG15_HAS_TRI 0
#define TX_PIO_REG15_IRQ_TYPE NONE
#define TX_PIO_REG15_RESET_VALUE 0

/*
 * Macros for device 'tx_pio_reg16', class 'altera_avalon_pio'
 * The macros are prefixed with 'TX_PIO_REG16_'.
 * The prefix is the slave descriptor.
 */
#define TX_PIO_REG16_COMPONENT_TYPE altera_avalon_pio
#define TX_PIO_REG16_COMPONENT_NAME tx_pio_reg16
#define TX_PIO_REG16_BASE 0x120
#define TX_PIO_REG16_SPAN 16
#define TX_PIO_REG16_END 0x12f
#define TX_PIO_REG16_BIT_CLEARING_EDGE_REGISTER 0
#define TX_PIO_REG16_BIT_MODIFYING_OUTPUT_REGISTER 0
#define TX_PIO_REG16_CAPTURE 0
#define TX_PIO_REG16_DATA_WIDTH 32
#define TX_PIO_REG16_DO_TEST_BENCH_WIRING 0
#define TX_PIO_REG16_DRIVEN_SIM_VALUE 0
#define TX_PIO_REG16_EDGE_TYPE NONE
#define TX_PIO_REG16_FREQ 50000000
#define TX_PIO_REG16_HAS_IN 0
#define TX_PIO_REG16_HAS_OUT 1
#define TX_PIO_REG16_HAS_TRI 0
#define TX_PIO_REG16_IRQ_TYPE NONE
#define TX_PIO_REG16_RESET_VALUE 0

/*
 * Macros for device 'tx_pio_reg17', class 'altera_avalon_pio'
 * The macros are prefixed with 'TX_PIO_REG17_'.
 * The prefix is the slave descriptor.
 */
#define TX_PIO_REG17_COMPONENT_TYPE altera_avalon_pio
#define TX_PIO_REG17_COMPONENT_NAME tx_pio_reg17
#define TX_PIO_REG17_BASE 0x130
#define TX_PIO_REG17_SPAN 16
#define TX_PIO_REG17_END 0x13f
#define TX_PIO_REG17_BIT_CLEARING_EDGE_REGISTER 0
#define TX_PIO_REG17_BIT_MODIFYING_OUTPUT_REGISTER 0
#define TX_PIO_REG17_CAPTURE 0
#define TX_PIO_REG17_DATA_WIDTH 32
#define TX_PIO_REG17_DO_TEST_BENCH_WIRING 0
#define TX_PIO_REG17_DRIVEN_SIM_VALUE 0
#define TX_PIO_REG17_EDGE_TYPE NONE
#define TX_PIO_REG17_FREQ 50000000
#define TX_PIO_REG17_HAS_IN 0
#define TX_PIO_REG17_HAS_OUT 1
#define TX_PIO_REG17_HAS_TRI 0
#define TX_PIO_REG17_IRQ_TYPE NONE
#define TX_PIO_REG17_RESET_VALUE 0

/*
 * Macros for device 'tx_pio_reg18', class 'altera_avalon_pio'
 * The macros are prefixed with 'TX_PIO_REG18_'.
 * The prefix is the slave descriptor.
 */
#define TX_PIO_REG18_COMPONENT_TYPE altera_avalon_pio
#define TX_PIO_REG18_COMPONENT_NAME tx_pio_reg18
#define TX_PIO_REG18_BASE 0x140
#define TX_PIO_REG18_SPAN 16
#define TX_PIO_REG18_END 0x14f
#define TX_PIO_REG18_BIT_CLEARING_EDGE_REGISTER 0
#define TX_PIO_REG18_BIT_MODIFYING_OUTPUT_REGISTER 0
#define TX_PIO_REG18_CAPTURE 0
#define TX_PIO_REG18_DATA_WIDTH 32
#define TX_PIO_REG18_DO_TEST_BENCH_WIRING 0
#define TX_PIO_REG18_DRIVEN_SIM_VALUE 0
#define TX_PIO_REG18_EDGE_TYPE NONE
#define TX_PIO_REG18_FREQ 50000000
#define TX_PIO_REG18_HAS_IN 0
#define TX_PIO_REG18_HAS_OUT 1
#define TX_PIO_REG18_HAS_TRI 0
#define TX_PIO_REG18_IRQ_TYPE NONE
#define TX_PIO_REG18_RESET_VALUE 0

/*
 * Macros for device 'tx_pio_reg19', class 'altera_avalon_pio'
 * The macros are prefixed with 'TX_PIO_REG19_'.
 * The prefix is the slave descriptor.
 */
#define TX_PIO_REG19_COMPONENT_TYPE altera_avalon_pio
#define TX_PIO_REG19_COMPONENT_NAME tx_pio_reg19
#define TX_PIO_REG19_BASE 0x150
#define TX_PIO_REG19_SPAN 16
#define TX_PIO_REG19_END 0x15f
#define TX_PIO_REG19_BIT_CLEARING_EDGE_REGISTER 0
#define TX_PIO_REG19_BIT_MODIFYING_OUTPUT_REGISTER 0
#define TX_PIO_REG19_CAPTURE 0
#define TX_PIO_REG19_DATA_WIDTH 32
#define TX_PIO_REG19_DO_TEST_BENCH_WIRING 0
#define TX_PIO_REG19_DRIVEN_SIM_VALUE 0
#define TX_PIO_REG19_EDGE_TYPE NONE
#define TX_PIO_REG19_FREQ 50000000
#define TX_PIO_REG19_HAS_IN 0
#define TX_PIO_REG19_HAS_OUT 1
#define TX_PIO_REG19_HAS_TRI 0
#define TX_PIO_REG19_IRQ_TYPE NONE
#define TX_PIO_REG19_RESET_VALUE 0

/*
 * Macros for device 'tx_pio_reg20', class 'altera_avalon_pio'
 * The macros are prefixed with 'TX_PIO_REG20_'.
 * The prefix is the slave descriptor.
 */
#define TX_PIO_REG20_COMPONENT_TYPE altera_avalon_pio
#define TX_PIO_REG20_COMPONENT_NAME tx_pio_reg20
#define TX_PIO_REG20_BASE 0x160
#define TX_PIO_REG20_SPAN 16
#define TX_PIO_REG20_END 0x16f
#define TX_PIO_REG20_BIT_CLEARING_EDGE_REGISTER 0
#define TX_PIO_REG20_BIT_MODIFYING_OUTPUT_REGISTER 0
#define TX_PIO_REG20_CAPTURE 0
#define TX_PIO_REG20_DATA_WIDTH 32
#define TX_PIO_REG20_DO_TEST_BENCH_WIRING 0
#define TX_PIO_REG20_DRIVEN_SIM_VALUE 0
#define TX_PIO_REG20_EDGE_TYPE NONE
#define TX_PIO_REG20_FREQ 50000000
#define TX_PIO_REG20_HAS_IN 0
#define TX_PIO_REG20_HAS_OUT 1
#define TX_PIO_REG20_HAS_TRI 0
#define TX_PIO_REG20_IRQ_TYPE NONE
#define TX_PIO_REG20_RESET_VALUE 0

/*
 * Macros for device 'tx_pio_reg21', class 'altera_avalon_pio'
 * The macros are prefixed with 'TX_PIO_REG21_'.
 * The prefix is the slave descriptor.
 */
#define TX_PIO_REG21_COMPONENT_TYPE altera_avalon_pio
#define TX_PIO_REG21_COMPONENT_NAME tx_pio_reg21
#define TX_PIO_REG21_BASE 0x170
#define TX_PIO_REG21_SPAN 16
#define TX_PIO_REG21_END 0x17f
#define TX_PIO_REG21_BIT_CLEARING_EDGE_REGISTER 0
#define TX_PIO_REG21_BIT_MODIFYING_OUTPUT_REGISTER 0
#define TX_PIO_REG21_CAPTURE 0
#define TX_PIO_REG21_DATA_WIDTH 32
#define TX_PIO_REG21_DO_TEST_BENCH_WIRING 0
#define TX_PIO_REG21_DRIVEN_SIM_VALUE 0
#define TX_PIO_REG21_EDGE_TYPE NONE
#define TX_PIO_REG21_FREQ 50000000
#define TX_PIO_REG21_HAS_IN 0
#define TX_PIO_REG21_HAS_OUT 1
#define TX_PIO_REG21_HAS_TRI 0
#define TX_PIO_REG21_IRQ_TYPE NONE
#define TX_PIO_REG21_RESET_VALUE 0

/*
 * Macros for device 'tx_pio_reg22', class 'altera_avalon_pio'
 * The macros are prefixed with 'TX_PIO_REG22_'.
 * The prefix is the slave descriptor.
 */
#define TX_PIO_REG22_COMPONENT_TYPE altera_avalon_pio
#define TX_PIO_REG22_COMPONENT_NAME tx_pio_reg22
#define TX_PIO_REG22_BASE 0x180
#define TX_PIO_REG22_SPAN 16
#define TX_PIO_REG22_END 0x18f
#define TX_PIO_REG22_BIT_CLEARING_EDGE_REGISTER 0
#define TX_PIO_REG22_BIT_MODIFYING_OUTPUT_REGISTER 0
#define TX_PIO_REG22_CAPTURE 0
#define TX_PIO_REG22_DATA_WIDTH 32
#define TX_PIO_REG22_DO_TEST_BENCH_WIRING 0
#define TX_PIO_REG22_DRIVEN_SIM_VALUE 0
#define TX_PIO_REG22_EDGE_TYPE NONE
#define TX_PIO_REG22_FREQ 50000000
#define TX_PIO_REG22_HAS_IN 0
#define TX_PIO_REG22_HAS_OUT 1
#define TX_PIO_REG22_HAS_TRI 0
#define TX_PIO_REG22_IRQ_TYPE NONE
#define TX_PIO_REG22_RESET_VALUE 0

/*
 * Macros for device 'tx_pio_reg23', class 'altera_avalon_pio'
 * The macros are prefixed with 'TX_PIO_REG23_'.
 * The prefix is the slave descriptor.
 */
#define TX_PIO_REG23_COMPONENT_TYPE altera_avalon_pio
#define TX_PIO_REG23_COMPONENT_NAME tx_pio_reg23
#define TX_PIO_REG23_BASE 0x190
#define TX_PIO_REG23_SPAN 16
#define TX_PIO_REG23_END 0x19f
#define TX_PIO_REG23_BIT_CLEARING_EDGE_REGISTER 0
#define TX_PIO_REG23_BIT_MODIFYING_OUTPUT_REGISTER 0
#define TX_PIO_REG23_CAPTURE 0
#define TX_PIO_REG23_DATA_WIDTH 32
#define TX_PIO_REG23_DO_TEST_BENCH_WIRING 0
#define TX_PIO_REG23_DRIVEN_SIM_VALUE 0
#define TX_PIO_REG23_EDGE_TYPE NONE
#define TX_PIO_REG23_FREQ 50000000
#define TX_PIO_REG23_HAS_IN 0
#define TX_PIO_REG23_HAS_OUT 1
#define TX_PIO_REG23_HAS_TRI 0
#define TX_PIO_REG23_IRQ_TYPE NONE
#define TX_PIO_REG23_RESET_VALUE 0

/*
 * Macros for device 'tx_pio_reg24', class 'altera_avalon_pio'
 * The macros are prefixed with 'TX_PIO_REG24_'.
 * The prefix is the slave descriptor.
 */
#define TX_PIO_REG24_COMPONENT_TYPE altera_avalon_pio
#define TX_PIO_REG24_COMPONENT_NAME tx_pio_reg24
#define TX_PIO_REG24_BASE 0x1a0
#define TX_PIO_REG24_SPAN 16
#define TX_PIO_REG24_END 0x1af
#define TX_PIO_REG24_BIT_CLEARING_EDGE_REGISTER 0
#define TX_PIO_REG24_BIT_MODIFYING_OUTPUT_REGISTER 0
#define TX_PIO_REG24_CAPTURE 0
#define TX_PIO_REG24_DATA_WIDTH 32
#define TX_PIO_REG24_DO_TEST_BENCH_WIRING 0
#define TX_PIO_REG24_DRIVEN_SIM_VALUE 0
#define TX_PIO_REG24_EDGE_TYPE NONE
#define TX_PIO_REG24_FREQ 50000000
#define TX_PIO_REG24_HAS_IN 0
#define TX_PIO_REG24_HAS_OUT 1
#define TX_PIO_REG24_HAS_TRI 0
#define TX_PIO_REG24_IRQ_TYPE NONE
#define TX_PIO_REG24_RESET_VALUE 0

/*
 * Macros for device 'tx_pio_reg25', class 'altera_avalon_pio'
 * The macros are prefixed with 'TX_PIO_REG25_'.
 * The prefix is the slave descriptor.
 */
#define TX_PIO_REG25_COMPONENT_TYPE altera_avalon_pio
#define TX_PIO_REG25_COMPONENT_NAME tx_pio_reg25
#define TX_PIO_REG25_BASE 0x1b0
#define TX_PIO_REG25_SPAN 16
#define TX_PIO_REG25_END 0x1bf
#define TX_PIO_REG25_BIT_CLEARING_EDGE_REGISTER 0
#define TX_PIO_REG25_BIT_MODIFYING_OUTPUT_REGISTER 0
#define TX_PIO_REG25_CAPTURE 0
#define TX_PIO_REG25_DATA_WIDTH 32
#define TX_PIO_REG25_DO_TEST_BENCH_WIRING 0
#define TX_PIO_REG25_DRIVEN_SIM_VALUE 0
#define TX_PIO_REG25_EDGE_TYPE NONE
#define TX_PIO_REG25_FREQ 50000000
#define TX_PIO_REG25_HAS_IN 0
#define TX_PIO_REG25_HAS_OUT 1
#define TX_PIO_REG25_HAS_TRI 0
#define TX_PIO_REG25_IRQ_TYPE NONE
#define TX_PIO_REG25_RESET_VALUE 0

/*
 * Macros for device 'tx_pio_reg26', class 'altera_avalon_pio'
 * The macros are prefixed with 'TX_PIO_REG26_'.
 * The prefix is the slave descriptor.
 */
#define TX_PIO_REG26_COMPONENT_TYPE altera_avalon_pio
#define TX_PIO_REG26_COMPONENT_NAME tx_pio_reg26
#define TX_PIO_REG26_BASE 0x1c0
#define TX_PIO_REG26_SPAN 16
#define TX_PIO_REG26_END 0x1cf
#define TX_PIO_REG26_BIT_CLEARING_EDGE_REGISTER 0
#define TX_PIO_REG26_BIT_MODIFYING_OUTPUT_REGISTER 0
#define TX_PIO_REG26_CAPTURE 0
#define TX_PIO_REG26_DATA_WIDTH 32
#define TX_PIO_REG26_DO_TEST_BENCH_WIRING 0
#define TX_PIO_REG26_DRIVEN_SIM_VALUE 0
#define TX_PIO_REG26_EDGE_TYPE NONE
#define TX_PIO_REG26_FREQ 50000000
#define TX_PIO_REG26_HAS_IN 0
#define TX_PIO_REG26_HAS_OUT 1
#define TX_PIO_REG26_HAS_TRI 0
#define TX_PIO_REG26_IRQ_TYPE NONE
#define TX_PIO_REG26_RESET_VALUE 0

/*
 * Macros for device 'pio_led', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_LED_'.
 * The prefix is the slave descriptor.
 */
#define PIO_LED_COMPONENT_TYPE altera_avalon_pio
#define PIO_LED_COMPONENT_NAME pio_led
#define PIO_LED_BASE 0x1d0
#define PIO_LED_SPAN 16
#define PIO_LED_END 0x1df
#define PIO_LED_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_LED_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_LED_CAPTURE 0
#define PIO_LED_DATA_WIDTH 8
#define PIO_LED_DO_TEST_BENCH_WIRING 0
#define PIO_LED_DRIVEN_SIM_VALUE 0
#define PIO_LED_EDGE_TYPE NONE
#define PIO_LED_FREQ 50000000
#define PIO_LED_HAS_IN 0
#define PIO_LED_HAS_OUT 1
#define PIO_LED_HAS_TRI 0
#define PIO_LED_IRQ_TYPE NONE
#define PIO_LED_RESET_VALUE 255

/*
 * Macros for device 'pio_adc_settings', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_ADC_SETTINGS_'.
 * The prefix is the slave descriptor.
 */
#define PIO_ADC_SETTINGS_COMPONENT_TYPE altera_avalon_pio
#define PIO_ADC_SETTINGS_COMPONENT_NAME pio_adc_settings
#define PIO_ADC_SETTINGS_BASE 0x1e0
#define PIO_ADC_SETTINGS_SPAN 16
#define PIO_ADC_SETTINGS_END 0x1ef
#define PIO_ADC_SETTINGS_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_ADC_SETTINGS_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_ADC_SETTINGS_CAPTURE 0
#define PIO_ADC_SETTINGS_DATA_WIDTH 32
#define PIO_ADC_SETTINGS_DO_TEST_BENCH_WIRING 0
#define PIO_ADC_SETTINGS_DRIVEN_SIM_VALUE 0
#define PIO_ADC_SETTINGS_EDGE_TYPE NONE
#define PIO_ADC_SETTINGS_FREQ 50000000
#define PIO_ADC_SETTINGS_HAS_IN 0
#define PIO_ADC_SETTINGS_HAS_OUT 1
#define PIO_ADC_SETTINGS_HAS_TRI 0
#define PIO_ADC_SETTINGS_IRQ_TYPE NONE
#define PIO_ADC_SETTINGS_RESET_VALUE 255

/*
 * Macros for device 'pio_adc_serial_command', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_ADC_SERIAL_COMMAND_'.
 * The prefix is the slave descriptor.
 */
#define PIO_ADC_SERIAL_COMMAND_COMPONENT_TYPE altera_avalon_pio
#define PIO_ADC_SERIAL_COMMAND_COMPONENT_NAME pio_adc_serial_command
#define PIO_ADC_SERIAL_COMMAND_BASE 0x1f0
#define PIO_ADC_SERIAL_COMMAND_SPAN 16
#define PIO_ADC_SERIAL_COMMAND_END 0x1ff
#define PIO_ADC_SERIAL_COMMAND_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_ADC_SERIAL_COMMAND_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_ADC_SERIAL_COMMAND_CAPTURE 0
#define PIO_ADC_SERIAL_COMMAND_DATA_WIDTH 24
#define PIO_ADC_SERIAL_COMMAND_DO_TEST_BENCH_WIRING 0
#define PIO_ADC_SERIAL_COMMAND_DRIVEN_SIM_VALUE 0
#define PIO_ADC_SERIAL_COMMAND_EDGE_TYPE NONE
#define PIO_ADC_SERIAL_COMMAND_FREQ 50000000
#define PIO_ADC_SERIAL_COMMAND_HAS_IN 0
#define PIO_ADC_SERIAL_COMMAND_HAS_OUT 1
#define PIO_ADC_SERIAL_COMMAND_HAS_TRI 0
#define PIO_ADC_SERIAL_COMMAND_IRQ_TYPE NONE
#define PIO_ADC_SERIAL_COMMAND_RESET_VALUE 0

/*
 * Macros for device 'pio_adc_control_comms', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_ADC_CONTROL_COMMS_'.
 * The prefix is the slave descriptor.
 */
#define PIO_ADC_CONTROL_COMMS_COMPONENT_TYPE altera_avalon_pio
#define PIO_ADC_CONTROL_COMMS_COMPONENT_NAME pio_adc_control_comms
#define PIO_ADC_CONTROL_COMMS_BASE 0x200
#define PIO_ADC_CONTROL_COMMS_SPAN 16
#define PIO_ADC_CONTROL_COMMS_END 0x20f
#define PIO_ADC_CONTROL_COMMS_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_ADC_CONTROL_COMMS_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_ADC_CONTROL_COMMS_CAPTURE 0
#define PIO_ADC_CONTROL_COMMS_DATA_WIDTH 32
#define PIO_ADC_CONTROL_COMMS_DO_TEST_BENCH_WIRING 0
#define PIO_ADC_CONTROL_COMMS_DRIVEN_SIM_VALUE 0
#define PIO_ADC_CONTROL_COMMS_EDGE_TYPE NONE
#define PIO_ADC_CONTROL_COMMS_FREQ 50000000
#define PIO_ADC_CONTROL_COMMS_HAS_IN 0
#define PIO_ADC_CONTROL_COMMS_HAS_OUT 1
#define PIO_ADC_CONTROL_COMMS_HAS_TRI 0
#define PIO_ADC_CONTROL_COMMS_IRQ_TYPE NONE
#define PIO_ADC_CONTROL_COMMS_RESET_VALUE 0

/*
 * Macros for device 'pio_adc_fpga_state_reset', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_ADC_FPGA_STATE_RESET_'.
 * The prefix is the slave descriptor.
 */
#define PIO_ADC_FPGA_STATE_RESET_COMPONENT_TYPE altera_avalon_pio
#define PIO_ADC_FPGA_STATE_RESET_COMPONENT_NAME pio_adc_fpga_state_reset
#define PIO_ADC_FPGA_STATE_RESET_BASE 0x210
#define PIO_ADC_FPGA_STATE_RESET_SPAN 16
#define PIO_ADC_FPGA_STATE_RESET_END 0x21f
#define PIO_ADC_FPGA_STATE_RESET_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_ADC_FPGA_STATE_RESET_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_ADC_FPGA_STATE_RESET_CAPTURE 0
#define PIO_ADC_FPGA_STATE_RESET_DATA_WIDTH 1
#define PIO_ADC_FPGA_STATE_RESET_DO_TEST_BENCH_WIRING 0
#define PIO_ADC_FPGA_STATE_RESET_DRIVEN_SIM_VALUE 0
#define PIO_ADC_FPGA_STATE_RESET_EDGE_TYPE NONE
#define PIO_ADC_FPGA_STATE_RESET_FREQ 50000000
#define PIO_ADC_FPGA_STATE_RESET_HAS_IN 0
#define PIO_ADC_FPGA_STATE_RESET_HAS_OUT 1
#define PIO_ADC_FPGA_STATE_RESET_HAS_TRI 0
#define PIO_ADC_FPGA_STATE_RESET_IRQ_TYPE NONE
#define PIO_ADC_FPGA_STATE_RESET_RESET_VALUE 0

/*
 * Macros for device 'pio_set_adc_record_length', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_SET_ADC_RECORD_LENGTH_'.
 * The prefix is the slave descriptor.
 */
#define PIO_SET_ADC_RECORD_LENGTH_COMPONENT_TYPE altera_avalon_pio
#define PIO_SET_ADC_RECORD_LENGTH_COMPONENT_NAME pio_set_adc_record_length
#define PIO_SET_ADC_RECORD_LENGTH_BASE 0x220
#define PIO_SET_ADC_RECORD_LENGTH_SPAN 16
#define PIO_SET_ADC_RECORD_LENGTH_END 0x22f
#define PIO_SET_ADC_RECORD_LENGTH_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_SET_ADC_RECORD_LENGTH_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_SET_ADC_RECORD_LENGTH_CAPTURE 0
#define PIO_SET_ADC_RECORD_LENGTH_DATA_WIDTH 16
#define PIO_SET_ADC_RECORD_LENGTH_DO_TEST_BENCH_WIRING 0
#define PIO_SET_ADC_RECORD_LENGTH_DRIVEN_SIM_VALUE 0
#define PIO_SET_ADC_RECORD_LENGTH_EDGE_TYPE NONE
#define PIO_SET_ADC_RECORD_LENGTH_FREQ 50000000
#define PIO_SET_ADC_RECORD_LENGTH_HAS_IN 0
#define PIO_SET_ADC_RECORD_LENGTH_HAS_OUT 1
#define PIO_SET_ADC_RECORD_LENGTH_HAS_TRI 0
#define PIO_SET_ADC_RECORD_LENGTH_IRQ_TYPE NONE
#define PIO_SET_ADC_RECORD_LENGTH_RESET_VALUE 0

/*
 * Macros for device 'sysid_qsys', class 'altera_avalon_sysid_qsys'
 * The macros are prefixed with 'SYSID_QSYS_'.
 * The prefix is the slave descriptor.
 */
#define SYSID_QSYS_COMPONENT_TYPE altera_avalon_sysid_qsys
#define SYSID_QSYS_COMPONENT_NAME sysid_qsys
#define SYSID_QSYS_BASE 0x10000
#define SYSID_QSYS_SPAN 8
#define SYSID_QSYS_END 0x10007
#define SYSID_QSYS_ID 2899645186
#define SYSID_QSYS_TIMESTAMP 1576522649

/*
 * Macros for device 'jtag_uart', class 'altera_avalon_jtag_uart'
 * The macros are prefixed with 'JTAG_UART_'.
 * The prefix is the slave descriptor.
 */
#define JTAG_UART_COMPONENT_TYPE altera_avalon_jtag_uart
#define JTAG_UART_COMPONENT_NAME jtag_uart
#define JTAG_UART_BASE 0x20000
#define JTAG_UART_SPAN 8
#define JTAG_UART_END 0x20007
#define JTAG_UART_IRQ 2
#define JTAG_UART_READ_DEPTH 64
#define JTAG_UART_READ_THRESHOLD 8
#define JTAG_UART_WRITE_DEPTH 64
#define JTAG_UART_WRITE_THRESHOLD 8


#endif /* _ALTERA_HPS_0_TXPIOREG_H_ */
