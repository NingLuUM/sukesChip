
#define BYTE_TO_BINARY_PATTERN "%s%s%s%s\x1B[0;0m %s%s%s%s\x1B[0;0m %s%s%s%s\x1B[0;0m %s%s%s%s"
#define BYTE_TO_BINARY(byte)  \
  (byte & 0x00008000 ? "\x1B[42;24m1" : "\x1B[44;24m0"), \
  (byte & 0x00004000 ? "\x1B[42;24m1" : "\x1B[44;24m0"), \
  (byte & 0x00002000 ? "\x1B[42;24m1" : "\x1B[44;24m0"), \
  (byte & 0x00001000 ? "\x1B[42;24m1" : "\x1B[44;24m0"), \
  (byte & 0x00000800 ? "\x1B[42;24m1" : "\x1B[44;24m0"), \
  (byte & 0x00000400 ? "\x1B[42;24m1" : "\x1B[44;24m0"), \
  (byte & 0x00000200 ? "\x1B[42;24m1" : "\x1B[44;24m0"), \
  (byte & 0x00000100 ? "\x1B[42;24m1" : "\x1B[44;24m0"), \
  (byte & 0x00000080 ? "\x1B[42;24m1" : "\x1B[44;24m0"), \
  (byte & 0x00000040 ? "\x1B[42;24m1" : "\x1B[44;24m0"), \
  (byte & 0x00000020 ? "\x1B[42;24m1" : "\x1B[44;24m0"), \
  (byte & 0x00000010 ? "\x1B[42;24m1" : "\x1B[44;24m0"), \
  (byte & 0x00000008 ? "\x1B[42;24m1" : "\x1B[44;24m0"), \
  (byte & 0x00000004 ? "\x1B[42;24m1" : "\x1B[44;24m0"), \
  (byte & 0x00000002 ? "\x1B[42;24m1" : "\x1B[44;24m0"), \
  (byte & 0x00000001 ? "\x1B[42;24m1\x1B[0;0m" : "\x1B[44;24m0\x1B[0;0m") 


#define BYTE_TO_BINARY_PATTERN32 \
  "%s%s%s%s\x1B[0;0m %s%s%s%s\x1B[0;0m %s%s%s%s\x1B[0;0m %s%s%s%s\x1B[0;0m " \
  "%s%s%s%s\x1B[0;0m %s%s%s%s\x1B[0;0m %s%s%s%s\x1B[0;0m %s%s%s%s"

#define BYTE_TO_BINARY32(byte)  \
  (byte & 0x80000000 ? "\x1B[42;24m1" : "\x1B[44;24m0"), \
  (byte & 0x40000000 ? "\x1B[42;24m1" : "\x1B[44;24m0"), \
  (byte & 0x20000000 ? "\x1B[42;24m1" : "\x1B[44;24m0"), \
  (byte & 0x10000000 ? "\x1B[42;24m1" : "\x1B[44;24m0"), \
  (byte & 0x08000000 ? "\x1B[42;24m1" : "\x1B[44;24m0"), \
  (byte & 0x04000000 ? "\x1B[42;24m1" : "\x1B[44;24m0"), \
  (byte & 0x02000000 ? "\x1B[42;24m1" : "\x1B[44;24m0"), \
  (byte & 0x01000000 ? "\x1B[42;24m1" : "\x1B[44;24m0"), \
  (byte & 0x00800000 ? "\x1B[42;24m1" : "\x1B[44;24m0"), \
  (byte & 0x00400000 ? "\x1B[42;24m1" : "\x1B[44;24m0"), \
  (byte & 0x00200000 ? "\x1B[42;24m1" : "\x1B[44;24m0"), \
  (byte & 0x00100000 ? "\x1B[42;24m1" : "\x1B[44;24m0"), \
  (byte & 0x00080000 ? "\x1B[42;24m1" : "\x1B[44;24m0"), \
  (byte & 0x00040000 ? "\x1B[42;24m1" : "\x1B[44;24m0"), \
  (byte & 0x00020000 ? "\x1B[42;24m1" : "\x1B[44;24m0"), \
  (byte & 0x00010000 ? "\x1B[42;24m1" : "\x1B[44;24m0"), \
  (byte & 0x00008000 ? "\x1B[42;24m1" : "\x1B[44;24m0"), \
  (byte & 0x00004000 ? "\x1B[42;24m1" : "\x1B[44;24m0"), \
  (byte & 0x00002000 ? "\x1B[42;24m1" : "\x1B[44;24m0"), \
  (byte & 0x00001000 ? "\x1B[42;24m1" : "\x1B[44;24m0"), \
  (byte & 0x00000800 ? "\x1B[42;24m1" : "\x1B[44;24m0"), \
  (byte & 0x00000400 ? "\x1B[42;24m1" : "\x1B[44;24m0"), \
  (byte & 0x00000200 ? "\x1B[42;24m1" : "\x1B[44;24m0"), \
  (byte & 0x00000100 ? "\x1B[42;24m1" : "\x1B[44;24m0"), \
  (byte & 0x00000080 ? "\x1B[42;24m1" : "\x1B[44;24m0"), \
  (byte & 0x00000040 ? "\x1B[42;24m1" : "\x1B[44;24m0"), \
  (byte & 0x00000020 ? "\x1B[42;24m1" : "\x1B[44;24m0"), \
  (byte & 0x00000010 ? "\x1B[42;24m1" : "\x1B[44;24m0"), \
  (byte & 0x00000008 ? "\x1B[42;24m1" : "\x1B[44;24m0"), \
  (byte & 0x00000004 ? "\x1B[42;24m1" : "\x1B[44;24m0"), \
  (byte & 0x00000002 ? "\x1B[42;24m1" : "\x1B[44;24m0"), \
  (byte & 0x00000001 ? "\x1B[42;24m1\x1B[0;0m" : "\x1B[44;24m0\x1B[0;0m") 

void printBinary(uint32_t val){
    uint16_t bval;
    bval = (val & 0xffff);
    printf(BYTE_TO_BINARY_PATTERN"\n",BYTE_TO_BINARY(bval));
}

void printBinaryInterrupt(uint32_t val){
    printf(BYTE_TO_BINARY_PATTERN32"\n\n",BYTE_TO_BINARY32(val));
}
