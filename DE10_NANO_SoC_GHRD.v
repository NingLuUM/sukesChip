
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE10_NANO_SoC_GHRD(

	//////////// CLOCK //////////
	input               FPGA_CLK1_50,
	input               FPGA_CLK2_50,
	input               FPGA_CLK3_50,

	//////////// HPS //////////
	inout               HPS_CONV_USB_N,
	output   [14: 0]    HPS_DDR3_ADDR,
	output   [ 2: 0]    HPS_DDR3_BA,
	output              HPS_DDR3_CAS_N,
	output              HPS_DDR3_CK_N,
	output              HPS_DDR3_CK_P,
	output              HPS_DDR3_CKE,
	output              HPS_DDR3_CS_N,
	output   [ 3: 0]    HPS_DDR3_DM,
	inout    [31: 0]    HPS_DDR3_DQ,
	inout    [ 3: 0]    HPS_DDR3_DQS_N,
	inout    [ 3: 0]    HPS_DDR3_DQS_P,
	output              HPS_DDR3_ODT,
	output              HPS_DDR3_RAS_N,
	output              HPS_DDR3_RESET_N,
	input               HPS_DDR3_RZQ,
	output              HPS_DDR3_WE_N,
	output              HPS_ENET_GTX_CLK,
	inout               HPS_ENET_INT_N,
	output              HPS_ENET_MDC,
	inout               HPS_ENET_MDIO,
	input               HPS_ENET_RX_CLK,
	input    [ 3: 0]    HPS_ENET_RX_DATA,
	input               HPS_ENET_RX_DV,
	output   [ 3: 0]    HPS_ENET_TX_DATA,
	output              HPS_ENET_TX_EN,
	inout               HPS_GSENSOR_INT,
	inout               HPS_I2C0_SCLK,
	inout               HPS_I2C0_SDAT,
	inout               HPS_I2C1_SCLK,
	inout               HPS_I2C1_SDAT,
	inout               HPS_KEY,
	inout               HPS_LED,
	inout               HPS_LTC_GPIO,
	output              HPS_SD_CLK,
	inout               HPS_SD_CMD,
	inout    [ 3: 0]    HPS_SD_DATA,
	output              HPS_SPIM_CLK,
	input               HPS_SPIM_MISO,
	output              HPS_SPIM_MOSI,
	inout               HPS_SPIM_SS,
	input               HPS_UART_RX,
	output              HPS_UART_TX,
	input               HPS_USB_CLKOUT,
	inout    [ 7: 0]    HPS_USB_DATA,
	input               HPS_USB_DIR,
	input               HPS_USB_NXT,
	output              HPS_USB_STP,

	//////////// KEY //////////
	input	[ 1: 0]		KEY,

	//////////// LED //////////
	output	[ 7: 0]		LED,

	//////////// SW //////////
	input	[ 3: 0]		SW,

	
	//*****************************************//
	//************* NON-GHRD CODE *************//
	//*****************************************//
	
	// TRIDENT ONLY I/Os //
	input				EXTERNAL_TRIGGER_INPUT,				// external input trigger via SMA on each 8-channel board
	input	[ 7: 0]		ADC_DATA_LINES, 	// Digial data from ADC for all 8 channels

	output				ADC_RESET,
	output				ADC_CLKIN,
	output				ADC_SCLK,
	output				ADC_SDATA,
	output				ADC_SEN,
	output				ADC_PDN,
	output				ADC_SYNC,
	
	input					ADC_SDOUT,

	output [7:0]		TRANSDUCER_OUTPUTS,
	output [15:0]		TRIG_LED_OUTPUTS,
	output [1:0]		VARGAIN

);

//=======================================================
//  REG/WIRE declarations
//=======================================================
wire			hps_fpga_reset_n;
wire	[1: 0]	fpga_debounced_buttons;
wire	[7: 0]	fpga_led_internal;
wire	[2: 0]	hps_reset_req;
wire			hps_cold_reset;
wire			hps_warm_reset;
wire			hps_debug_reset;
wire	[27: 0]	stm_hw_events;
wire			fpga_clk_50;

assign fpga_clk_50 = FPGA_CLK1_50;
assign stm_hw_events = {{15{1'b0}}, SW, fpga_led_internal, fpga_debounced_buttons};



//*****************************************//
//************* NON-GHRD CODE *************//
//*****************************************//

reg gnd = 1'b0;

wire [7:0] led_pins;


wire CLK2, CLK50, CLK100, CLK200;
assign ADC_SCLK = CLK2;
assign ADC_CLKIN = CLK50;
// wires and assignments for adc outputs
wire adc_reset, adc_sen, adc_sdata, adc_sync, adc_pdn;

assign ADC_RESET	= adc_reset; 
assign ADC_SEN		= adc_sen;
assign ADC_SDATA	= adc_sdata; 
assign ADC_SYNC		= adc_sync;
assign ADC_PDN		= adc_pdn;


//=======================================================
//  Structural coding
//=======================================================

wire 	[31:0] 		adc_pio_settings;
assign VARGAIN[0] = adc_pio_settings[0];
assign VARGAIN[1] = adc_pio_settings[1];

wire	[23:0]		adc_serial_command;
wire	[7:0]		adc_control_comms;

wire	[14:0]		adc_write_addr;
wire				adc_state_reset;

wire	[15:0]		adc_record_length;


wire  	       		adc_wren_bank;
wire  	       		adc_chipsel_bank;
wire  	       		adc_clken_bank;
wire	[15:0]		adc_byteen_bank;
wire  	[127:0] 	adc_writedata_bank;

wire 	[31:0]		rcv_interrupt;
wire 	[31:0]		tx_interrupt;

wire 	[14:0]		tx_phasedelay_read_addr;
wire 	[127:0]		tx_phasedelays;

wire 	[14:0]		tx_instruction_read_addr;
wire 	[127:0]		tx_instruction;

wire 	[26:0][31:0]	tx_pio_reg;

wire	[1:0] 		trigLines_txAdc;

wire				FRAME_CLK_SHIFT;
wire 				BIT_CLK_SHIFT;

assign rst = 0;

ADCclock u4 (
	.refclk   			(FPGA_CLK1_50),
	.rst      			(rst),
	.outclk_0 			(CLK2),		// 2 MHz
	.outclk_1 			(CLK50),		// 50mhz
	.outclk_2			(CLK100),	// 100 MHz
	
	.outclk_3			(CLK200),	// 200MHz	
	.outclk_4			(FRAME_CLK_SHIFT),		// **50mhz - 1ns phase delay
	.outclk_5			(BIT_CLK_SHIFT)		// **300mhz 0 phase delay
);

		
ADC_Control_Module u2(

	.adc_clkinp				(CLK50),
	.frame_clk				(FRAME_CLK_SHIFT),
	.bit_clk				(BIT_CLK_SHIFT),
	
	.adc_control_comm		(adc_control_comms),
	.adc_serial_cmd			(adc_serial_command),
	
	.ADC_RESET				(adc_reset),
	.ADC_SDATA				(adc_sdata),
	.ADC_SEN				(adc_sen),
	.ADC_PDN				(adc_pdn),
	.ADC_SYNC				(adc_sync),
	
	.ADC_SCLK				(ADC_SCLK),
	.ADC_INPUT_DATA_LINES	(ADC_DATA_LINES),
	
	.itxTrig				(trigLines_txAdc[0]),
	.otxTrigAck				(trigLines_txAdc[1]),
	
	.fclk_delay				(adc_pio_settings[8:6]),
	
	
	.iRecLength				(adc_record_length),
	.iStateReset			(adc_state_reset),
	
	.oRcvInterrupt			(rcv_interrupt),
	
	.down_sample_clk_divisor (adc_pio_settings[5:2]),
	.sampling_mode_opts		(adc_pio_settings[11:9]),
	.compressor_opts		(adc_pio_settings[13:12]),
	
	.oBYTEEN				(adc_byteen_bank),
	.oADCData				(adc_writedata_bank),
	
	.oWREN					(adc_wren_bank),
	.oCLKEN					(adc_clken_bank),
	.oCHIPSEL				(adc_chipsel_bank),

	.oWAddr					(adc_write_addr)
);


Output_Control_Module_PIO u3(
	.txCLK						(CLK100),
	
	.itxControlComms			(tx_pio_reg[0]), // tx_pio_reg0
	.itxPioControlSettings		(tx_pio_reg[1]), // tx_pio_reg1
	
	// static settings
	.itxPioTriggerLedRestLevels	(tx_pio_reg[2][31:16]),
	.itxTransducerOutputIsActive(tx_pio_reg[2][15:8]),	// tx_pio_reg2
	.itxBoardIdentifiers		(tx_pio_reg[2][7:0]),	// tx_pio_reg2
	

	.itxPioPhaseDelay_ch0_ch1	(tx_pio_reg[3]), 	// tx_pio_reg3
	.itxPioPhaseDelay_ch2_ch3	(tx_pio_reg[4]), 	// tx_pio_reg4
	.itxPioPhaseDelay_ch4_ch5	(tx_pio_reg[5]), 	// tx_pio_reg5
	.itxPioPhaseDelay_ch6_ch7	(tx_pio_reg[6]), 	// tx_pio_reg6
	
	.itxPioChargetime_reg		(tx_pio_reg[7][8:0]),	// tx_pio_reg7
	.itxRecvTrigDelay			(tx_pio_reg[7][31:9]),
	
	.itxTrigLedDurationAndDelay	(tx_pio_reg[23:8]),	// tx_pio_reg8-24
	
	.itxRequestNextInstrTimer	(tx_pio_reg[25:24]),
	
	
	
	.itxExternalTrigger			(EXTERNAL_TRIGGER_INPUT),
	
	.otxTransducerOutput		(TRANSDUCER_OUTPUTS),
	
	.otxTriggerLedOutput		(TRIG_LED_OUTPUTS),
	
	.itxADCTriggerAck			(trigLines_txAdc[1]),
	.otxADCTriggerLine			(trigLines_txAdc[0]),
	
	.otxInterrupt				(tx_interrupt)

	
);

//=======================================================
//  Structural coding
//=======================================================
soc_system u0(
		
		
		.pio_led_external_connection_export		(led_pins),
		.pio_adc_settings_export				(adc_pio_settings),
		
		.pio_adc_serial_command_export			(adc_serial_command),
		.pio_adc_control_comms_export			(adc_control_comms),

		.pio_adc_fpga_state_reset_export		(adc_state_reset),

		.pio_set_adc_record_length_export		(adc_record_length),

		.rcv_interrupt_export					(rcv_interrupt),
		.tx_interrupt_export					(tx_interrupt),
		
		.tx_pio_reg0_export						(tx_pio_reg[0]),
		.tx_pio_reg1_export						(tx_pio_reg[1]),
		.tx_pio_reg2_export						(tx_pio_reg[2]),
		.tx_pio_reg3_export						(tx_pio_reg[3]),
		.tx_pio_reg4_export						(tx_pio_reg[4]),
		.tx_pio_reg5_export						(tx_pio_reg[5]),
		.tx_pio_reg6_export						(tx_pio_reg[6]),
		.tx_pio_reg7_export						(tx_pio_reg[7]),
		.tx_pio_reg8_export						(tx_pio_reg[8]),
		.tx_pio_reg9_export						(tx_pio_reg[9]),
		.tx_pio_reg10_export					(tx_pio_reg[10]),
		.tx_pio_reg11_export					(tx_pio_reg[11]),
		.tx_pio_reg12_export					(tx_pio_reg[12]),
		.tx_pio_reg13_export					(tx_pio_reg[13]),
		.tx_pio_reg14_export					(tx_pio_reg[14]),
		.tx_pio_reg15_export					(tx_pio_reg[15]),
		.tx_pio_reg16_export					(tx_pio_reg[16]),
		.tx_pio_reg17_export					(tx_pio_reg[17]),
		.tx_pio_reg18_export					(tx_pio_reg[18]),
		.tx_pio_reg19_export					(tx_pio_reg[19]),
		.tx_pio_reg20_export					(tx_pio_reg[20]),
		.tx_pio_reg21_export					(tx_pio_reg[21]),
		.tx_pio_reg22_export					(tx_pio_reg[22]),
		.tx_pio_reg23_export					(tx_pio_reg[23]),
		.tx_pio_reg24_export					(tx_pio_reg[24]),
		.tx_pio_reg25_export					(tx_pio_reg[25]),
		.tx_pio_reg26_export					(tx_pio_reg[26]),
		
		
		.adc_ram_bank_address						(adc_write_addr),
		.adc_ram_bank_byteenable					(adc_byteen_bank),
		.adc_ram_bank_write							(adc_wren_bank),
		.adc_ram_bank_chipselect					(adc_chipsel_bank),
		.adc_ram_bank_clken							(adc_clken_bank),
		.adc_ram_bank_writedata					(adc_writedata_bank),
		.adc_ram_bank_readdata						(128'b0), //(32'b0)
		
		
		.tx_instruction_mem_address            (tx_instruction_read_addr),
		.tx_instruction_mem_chipselect         (1'b1), 
		.tx_instruction_mem_clken              (1'b1),
		.tx_instruction_mem_write              (1'b0),
		.tx_instruction_mem_readdata           (tx_instruction),
		.tx_instruction_mem_writedata          (64'b0),
		.tx_instruction_mem_byteenable         (8'b11111111),
		
		
		.tx_phase_delay_mem_address            (tx_phasedelay_read_addr),
		.tx_phase_delay_mem_chipselect         (1'b1),
		.tx_phase_delay_mem_clken              (1'b1),
		.tx_phase_delay_mem_write              (1'b0),
		.tx_phase_delay_mem_readdata           (tx_phasedelays),
		.tx_phase_delay_mem_writedata          (128'b0),
		.tx_phase_delay_mem_byteenable			(16'b1111111111111111),

		.ram_clock_bridge_clk						(CLK200), 
		.adc_clock_bridge_clk						(CLK50), 
		
		
		//Clock&Reset
		.clk_clk(FPGA_CLK1_50),													//                          clk.clk (hps_fpga_reset_n),
		.reset_reset_n(1'b1),													//                          reset.reset_n
		//HPS ddr3
		.memory_mem_a(HPS_DDR3_ADDR),                                //                         memory.mem_a
		.memory_mem_ba(HPS_DDR3_BA),                                 //                               .mem_ba
		.memory_mem_ck(HPS_DDR3_CK_P),                               //                               .mem_ck
		.memory_mem_ck_n(HPS_DDR3_CK_N),                             //                               .mem_ck_n
		.memory_mem_cke(HPS_DDR3_CKE),                               //                               .mem_cke
		.memory_mem_cs_n(HPS_DDR3_CS_N),                             //                               .mem_cs_n
		.memory_mem_ras_n(HPS_DDR3_RAS_N),                           //                               .mem_ras_n
		.memory_mem_cas_n(HPS_DDR3_CAS_N),                           //                               .mem_cas_n
		.memory_mem_we_n(HPS_DDR3_WE_N),                             //                               .mem_we_n
		.memory_mem_reset_n(HPS_DDR3_RESET_N),                       //                               .mem_reset_n
		.memory_mem_dq(HPS_DDR3_DQ),                                 //                               .mem_dq
		.memory_mem_dqs(HPS_DDR3_DQS_P),                             //                               .mem_dqs
		.memory_mem_dqs_n(HPS_DDR3_DQS_N),                           //                               .mem_dqs_n
		.memory_mem_odt(HPS_DDR3_ODT),                               //                               .mem_odt
		.memory_mem_dm(HPS_DDR3_DM),                                 //                               .mem_dm
		.memory_oct_rzqin(HPS_DDR3_RZQ),                             //                               .oct_rzqin
		//HPS ethernet
		.hps_0_hps_io_hps_io_emac1_inst_TX_CLK(HPS_ENET_GTX_CLK),    //                   hps_0_hps_io.hps_io_emac1_inst_TX_CLK
		.hps_0_hps_io_hps_io_emac1_inst_TXD0(HPS_ENET_TX_DATA[0]),   //                               .hps_io_emac1_inst_TXD0
		.hps_0_hps_io_hps_io_emac1_inst_TXD1(HPS_ENET_TX_DATA[1]),   //                               .hps_io_emac1_inst_TXD1
		.hps_0_hps_io_hps_io_emac1_inst_TXD2(HPS_ENET_TX_DATA[2]),   //                               .hps_io_emac1_inst_TXD2
		.hps_0_hps_io_hps_io_emac1_inst_TXD3(HPS_ENET_TX_DATA[3]),   //                               .hps_io_emac1_inst_TXD3
		.hps_0_hps_io_hps_io_emac1_inst_RXD0(HPS_ENET_RX_DATA[0]),   //                               .hps_io_emac1_inst_RXD0
		.hps_0_hps_io_hps_io_emac1_inst_MDIO(HPS_ENET_MDIO),         //                               .hps_io_emac1_inst_MDIO
		.hps_0_hps_io_hps_io_emac1_inst_MDC(HPS_ENET_MDC),           //                               .hps_io_emac1_inst_MDC
		.hps_0_hps_io_hps_io_emac1_inst_RX_CTL(HPS_ENET_RX_DV),      //                               .hps_io_emac1_inst_RX_CTL
		.hps_0_hps_io_hps_io_emac1_inst_TX_CTL(HPS_ENET_TX_EN),      //                               .hps_io_emac1_inst_TX_CTL
		.hps_0_hps_io_hps_io_emac1_inst_RX_CLK(HPS_ENET_RX_CLK),     //                               .hps_io_emac1_inst_RX_CLK
		.hps_0_hps_io_hps_io_emac1_inst_RXD1(HPS_ENET_RX_DATA[1]),   //                               .hps_io_emac1_inst_RXD1
		.hps_0_hps_io_hps_io_emac1_inst_RXD2(HPS_ENET_RX_DATA[2]),   //                               .hps_io_emac1_inst_RXD2
		.hps_0_hps_io_hps_io_emac1_inst_RXD3(HPS_ENET_RX_DATA[3]),   //                               .hps_io_emac1_inst_RXD3
		//HPS SD card
		.hps_0_hps_io_hps_io_sdio_inst_CMD(HPS_SD_CMD),              //                               .hps_io_sdio_inst_CMD
		.hps_0_hps_io_hps_io_sdio_inst_D0(HPS_SD_DATA[0]),           //                               .hps_io_sdio_inst_D0
		.hps_0_hps_io_hps_io_sdio_inst_D1(HPS_SD_DATA[1]),           //                               .hps_io_sdio_inst_D1
		.hps_0_hps_io_hps_io_sdio_inst_CLK(HPS_SD_CLK),              //                               .hps_io_sdio_inst_CLK
		.hps_0_hps_io_hps_io_sdio_inst_D2(HPS_SD_DATA[2]),           //                               .hps_io_sdio_inst_D2
		.hps_0_hps_io_hps_io_sdio_inst_D3(HPS_SD_DATA[3]),           //                               .hps_io_sdio_inst_D3
		//HPS USB
		.hps_0_hps_io_hps_io_usb1_inst_D0(HPS_USB_DATA[0]),          //                               .hps_io_usb1_inst_D0
		.hps_0_hps_io_hps_io_usb1_inst_D1(HPS_USB_DATA[1]),          //                               .hps_io_usb1_inst_D1
		.hps_0_hps_io_hps_io_usb1_inst_D2(HPS_USB_DATA[2]),          //                               .hps_io_usb1_inst_D2
		.hps_0_hps_io_hps_io_usb1_inst_D3(HPS_USB_DATA[3]),          //                               .hps_io_usb1_inst_D3
		.hps_0_hps_io_hps_io_usb1_inst_D4(HPS_USB_DATA[4]),          //                               .hps_io_usb1_inst_D4
		.hps_0_hps_io_hps_io_usb1_inst_D5(HPS_USB_DATA[5]),          //                               .hps_io_usb1_inst_D5
		.hps_0_hps_io_hps_io_usb1_inst_D6(HPS_USB_DATA[6]),          //                               .hps_io_usb1_inst_D6
		.hps_0_hps_io_hps_io_usb1_inst_D7(HPS_USB_DATA[7]),          //                               .hps_io_usb1_inst_D7
		.hps_0_hps_io_hps_io_usb1_inst_CLK(HPS_USB_CLKOUT),          //                               .hps_io_usb1_inst_CLK
		.hps_0_hps_io_hps_io_usb1_inst_STP(HPS_USB_STP),             //                               .hps_io_usb1_inst_STP
		.hps_0_hps_io_hps_io_usb1_inst_DIR(HPS_USB_DIR),             //                               .hps_io_usb1_inst_DIR
		.hps_0_hps_io_hps_io_usb1_inst_NXT(HPS_USB_NXT),             //                               .hps_io_usb1_inst_NXT
		//HPS SPI
		.hps_0_hps_io_hps_io_spim1_inst_CLK(HPS_SPIM_CLK),           //                               .hps_io_spim1_inst_CLK
		.hps_0_hps_io_hps_io_spim1_inst_MOSI(HPS_SPIM_MOSI),         //                               .hps_io_spim1_inst_MOSI
		.hps_0_hps_io_hps_io_spim1_inst_MISO(HPS_SPIM_MISO),         //                               .hps_io_spim1_inst_MISO
		.hps_0_hps_io_hps_io_spim1_inst_SS0(HPS_SPIM_SS),            //                               .hps_io_spim1_inst_SS0
		//HPS UART
		.hps_0_hps_io_hps_io_uart0_inst_RX(HPS_UART_RX),             //                               .hps_io_uart0_inst_RX
		.hps_0_hps_io_hps_io_uart0_inst_TX(HPS_UART_TX),             //                               .hps_io_uart0_inst_TX
		//HPS I2C1
		.hps_0_hps_io_hps_io_i2c0_inst_SDA(HPS_I2C0_SDAT),           //                               .hps_io_i2c0_inst_SDA
		.hps_0_hps_io_hps_io_i2c0_inst_SCL(HPS_I2C0_SCLK),           //                               .hps_io_i2c0_inst_SCL
		//HPS I2C2
		.hps_0_hps_io_hps_io_i2c1_inst_SDA(HPS_I2C1_SDAT),           //                               .hps_io_i2c1_inst_SDA
		.hps_0_hps_io_hps_io_i2c1_inst_SCL(HPS_I2C1_SCLK),           //                               .hps_io_i2c1_inst_SCL
		//GPIO
		.hps_0_hps_io_hps_io_gpio_inst_GPIO09(HPS_CONV_USB_N),       //                               .hps_io_gpio_inst_GPIO09
		.hps_0_hps_io_hps_io_gpio_inst_GPIO35(HPS_ENET_INT_N),       //                               .hps_io_gpio_inst_GPIO35
		.hps_0_hps_io_hps_io_gpio_inst_GPIO40(HPS_LTC_GPIO),         //                               .hps_io_gpio_inst_GPIO40
		.hps_0_hps_io_hps_io_gpio_inst_GPIO53(HPS_LED),              //                               .hps_io_gpio_inst_GPIO53
		.hps_0_hps_io_hps_io_gpio_inst_GPIO54(HPS_KEY),              //                               .hps_io_gpio_inst_GPIO54
		.hps_0_hps_io_hps_io_gpio_inst_GPIO61(HPS_GSENSOR_INT),      //                               .hps_io_gpio_inst_GPIO61
		//FPGA Partion
		//.led_pio_external_connection_export(fpga_led_internal),      //    led_pio_external_connection.export
		//.dipsw_pio_external_connection_export(SW),                   //  dipsw_pio_external_connection.export
		//.button_pio_external_connection_export(fpga_debounced_buttons),
																						 // button_pio_external_connection.export
		//               .hps_0_h2f_reset_reset_n(hps_fpga_reset_n),                  //                hps_0_h2f_reset.reset_n
		.hps_0_f2h_cold_reset_req_reset_n(~hps_cold_reset),          //       hps_0_f2h_cold_reset_req.reset_n
		.hps_0_f2h_debug_reset_req_reset_n(~hps_debug_reset),        //      hps_0_f2h_debug_reset_req.reset_n
		.hps_0_f2h_stm_hw_events_stm_hwevents(stm_hw_events),        //        hps_0_f2h_stm_hw_events.stm_hwevents
		//               .hps_0_f2h_warm_reset_req_reset_n(~hps_warm_reset),          //       hps_0_f2h_warm_reset_req.reset_n

);

// Debounce logic to clean out glitches within 1ms
debounce debounce_inst(
		.clk(fpga_clk_50),
		.reset_n(hps_fpga_reset_n),
		.data_in(KEY),
		.data_out(fpga_debounced_buttons)
);

defparam debounce_inst.WIDTH = 2;
defparam debounce_inst.POLARITY = "LOW";
defparam debounce_inst.TIMEOUT = 50000;               // at 50Mhz this is a debounce time of 1ms
defparam debounce_inst.TIMEOUT_WIDTH = 16;            // ceil(log2(TIMEOUT))

// Source/Probe megawizard instance
hps_reset hps_reset_inst(
		.source_clk(fpga_clk_50),
		.source(hps_reset_req)
);

altera_edge_detector pulse_cold_reset(
		.clk(fpga_clk_50),
		.rst_n(hps_fpga_reset_n),
		.signal_in(hps_reset_req[0]),
		.pulse_out(hps_cold_reset)
);
defparam pulse_cold_reset.PULSE_EXT = 6;
defparam pulse_cold_reset.EDGE_TYPE = 1;
defparam pulse_cold_reset.IGNORE_RST_WHILE_BUSY = 1;

altera_edge_detector pulse_warm_reset(
		.clk(fpga_clk_50),
		.rst_n(hps_fpga_reset_n),
		.signal_in(hps_reset_req[1]),
		.pulse_out(hps_warm_reset)
);
defparam pulse_warm_reset.PULSE_EXT = 2;
defparam pulse_warm_reset.EDGE_TYPE = 1;
defparam pulse_warm_reset.IGNORE_RST_WHILE_BUSY = 1;

altera_edge_detector pulse_debug_reset(
		.clk(fpga_clk_50),
		.rst_n(hps_fpga_reset_n),
		.signal_in(hps_reset_req[2]),
		.pulse_out(hps_debug_reset)
);
defparam pulse_debug_reset.PULSE_EXT = 32;
defparam pulse_debug_reset.EDGE_TYPE = 1;
defparam pulse_debug_reset.IGNORE_RST_WHILE_BUSY = 1;


endmodule
